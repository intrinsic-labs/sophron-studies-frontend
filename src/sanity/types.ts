/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  description?: BlockContent;
  price?: number;
  externalUrl?: string;
  isAvailable?: boolean;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  sizes?: Array<string>;
};

export type BlogHero = {
  _id: string;
  _type: "blogHero";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  internalTitle?: string;
  title?: string;
  description?: string;
  announcement?: string;
  announcementLink?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  publishedAt?: string;
  readingTime?: string;
  category?: string;
  tags?: Array<string>;
  featured?: boolean;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  avatar?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: string;
};

export type AboutPage = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  aboutHeroSection?: AboutHeroSection;
  aboutBioSection?: AboutBioSection;
  aboutGallerySection?: AboutGallerySection;
  upcomingReleaseSection?: {
    reference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "upcomingReleaseSection";
    };
    customButtonText?: string;
    customButtonLink?: string;
  };
  newsletterSection?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "newsletterSection";
  };
};

export type AboutGallerySection = {
  _type: "aboutGallerySection";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type AboutBioSection = {
  _type: "aboutBioSection";
  heading?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type AboutHeroSection = {
  _type: "aboutHeroSection";
  name?: string;
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  rightImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  leftImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  heroSection?: HeroSection;
  definitionSection?: DefinitionSection;
  featuredBlogPostSection?: FeaturedBlogPostSection;
  upcomingReleaseSection?: {
    reference?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "upcomingReleaseSection";
    };
    customButtonText?: string;
    customButtonLink?: string;
  };
  newsletterSection?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "newsletterSection";
  };
  testimonialsSection?: TestimonialsSection;
};

export type TestimonialsSection = {
  _type: "testimonialsSection";
  title?: string;
  subtitle?: string;
  testimonials?: Array<{
    text?: string;
    citation?: string;
    _type: "testimonial";
    _key: string;
  }>;
};

export type NewsletterSection = {
  _id: string;
  _type: "newsletterSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  internalTitle?: string;
  title?: string;
  subtitle?: string;
  placeholderText?: string;
  buttonText?: string;
};

export type UpcomingReleaseSection = {
  _id: string;
  _type: "upcomingReleaseSection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  internalTitle?: string;
  titlePart1?: string;
  titlePart2?: string;
  text?: BlockContent;
  buttonText?: string;
  buttonLink?: string;
  image1?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  image2?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type FeaturedBlogPostSection = {
  _type: "featuredBlogPostSection";
  titlePart1?: string;
  titlePart2?: string;
  featuredPost?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "post";
  };
  buttonText?: string;
  image1?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  image2?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type DefinitionSection = {
  _type: "definitionSection";
  titlePart1?: string;
  titlePart2?: string;
  definitionText?: BlockContent;
  image1?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  image2?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  importantPointTitle?: string;
  importantPointText?: BlockContent;
};

export type HeroSection = {
  _type: "heroSection";
  vimeoUrl?: string;
  backgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = BlockContent | Category | Product | BlogHero | Post | Author | AboutPage | AboutGallerySection | AboutBioSection | AboutHeroSection | HomePage | TestimonialsSection | NewsletterSection | UpcomingReleaseSection | FeaturedBlogPostSection | DefinitionSection | HeroSection | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ../sophron-studies-frontend/src/sanity/queries/aboutpage.queries.ts
// Variable: aboutPageQuery
// Query: *[_type == "aboutPage"][0] {  _id,  title,  aboutHeroSection {    name,    backgroundImage,    rightImage,    leftImage  },  aboutBioSection {    heading,    body  },  aboutGallerySection {    images[]  },  upcomingReleaseSection {    reference-> {      titlePart1,      titlePart2,      text,      buttonText,      buttonLink,      image1,      image2    },    customButtonText,    customButtonLink  },  newsletterSection-> {    title,    subtitle,    placeholderText,    buttonText  }}
export type AboutPageQueryResult = {
  _id: string;
  title: string | null;
  aboutHeroSection: {
    name: string | null;
    backgroundImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    rightImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    leftImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  } | null;
  aboutBioSection: {
    heading: string | null;
    body: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  } | null;
  aboutGallerySection: {
    images: Array<{
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }> | null;
  } | null;
  upcomingReleaseSection: {
    reference: {
      titlePart1: string | null;
      titlePart2: string | null;
      text: BlockContent | null;
      buttonText: string | null;
      buttonLink: string | null;
      image1: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
      image2: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
    } | null;
    customButtonText: string | null;
    customButtonLink: string | null;
  } | null;
  newsletterSection: {
    title: string | null;
    subtitle: string | null;
    placeholderText: string | null;
    buttonText: string | null;
  } | null;
} | null;

// Source: ../sophron-studies-frontend/src/sanity/queries/blog.queries.ts
// Variable: allBlogPostsQuery
// Query: *[  _type == "post"  && defined(slug.current)]|order(publishedAt desc){    _id,  title,  excerpt,  content,  "slug": slug.current,  coverImage,  "author": {    "name": author->name,    "avatar": author->avatar  },  publishedAt,  readingTime,  category,  tags,  featured}
export type AllBlogPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  };
  publishedAt: string | null;
  readingTime: string | null;
  category: string | null;
  tags: Array<string> | null;
  featured: boolean | null;
}>;
// Variable: featuredBlogPostsQuery
// Query: *[  _type == "post"  && defined(slug.current)  && featured == true]|order(publishedAt desc){    _id,  title,  excerpt,  content,  "slug": slug.current,  coverImage,  "author": {    "name": author->name,    "avatar": author->avatar  },  publishedAt,  readingTime,  category,  tags,  featured}
export type FeaturedBlogPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  };
  publishedAt: string | null;
  readingTime: string | null;
  category: string | null;
  tags: Array<string> | null;
  featured: boolean | null;
}>;
// Variable: blogPostBySlugQuery
// Query: *[  _type == "post"  && slug.current == $slug][0]{    _id,  title,  excerpt,  content,  "slug": slug.current,  coverImage,  "author": {    "name": author->name,    "avatar": author->avatar  },  publishedAt,  readingTime,  category,  tags,  featured}
export type BlogPostBySlugQueryResult = {
  _id: string;
  title: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  };
  publishedAt: string | null;
  readingTime: string | null;
  category: string | null;
  tags: Array<string> | null;
  featured: boolean | null;
} | null;
// Variable: relatedPostsQuery
// Query: *[  _type == "post"  && slug.current != $slug  && (category == $category || count((tags)[@ in $tags]) > 0)]|order(publishedAt desc)[0...3]{    _id,  title,  excerpt,  content,  "slug": slug.current,  coverImage,  "author": {    "name": author->name,    "avatar": author->avatar  },  publishedAt,  readingTime,  category,  tags,  featured}
export type RelatedPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  };
  publishedAt: string | null;
  readingTime: string | null;
  category: string | null;
  tags: Array<string> | null;
  featured: boolean | null;
}>;
// Variable: recentPostsQuery
// Query: *[  _type == "post"  && slug.current != $slug  && !(_id in $existingIds)]|order(publishedAt desc)[0...3]{    _id,  title,  excerpt,  content,  "slug": slug.current,  coverImage,  "author": {    "name": author->name,    "avatar": author->avatar  },  publishedAt,  readingTime,  category,  tags,  featured}
export type RecentPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  };
  publishedAt: string | null;
  readingTime: string | null;
  category: string | null;
  tags: Array<string> | null;
  featured: boolean | null;
}>;
// Variable: blogPostsByCategoryQuery
// Query: *[  _type == "post"  && defined(slug.current)  && category == $category]|order(publishedAt desc){    _id,  title,  excerpt,  content,  "slug": slug.current,  coverImage,  "author": {    "name": author->name,    "avatar": author->avatar  },  publishedAt,  readingTime,  category,  tags,  featured}
export type BlogPostsByCategoryQueryResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  };
  publishedAt: string | null;
  readingTime: string | null;
  category: string | null;
  tags: Array<string> | null;
  featured: boolean | null;
}>;
// Variable: blogPostsByTagQuery
// Query: *[  _type == "post"  && defined(slug.current)  && $tagName in tags]|order(publishedAt desc){    _id,  title,  excerpt,  content,  "slug": slug.current,  coverImage,  "author": {    "name": author->name,    "avatar": author->avatar  },  publishedAt,  readingTime,  category,  tags,  featured}
export type BlogPostsByTagQueryResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  };
  publishedAt: string | null;
  readingTime: string | null;
  category: string | null;
  tags: Array<string> | null;
  featured: boolean | null;
}>;
// Variable: searchBlogPostsQuery
// Query: *[  _type == "post"  && defined(slug.current)  && (    title match $searchPattern ||    excerpt match $searchPattern ||    content match $searchPattern ||    category match $searchPattern  )]|order(publishedAt desc){    _id,  title,  excerpt,  content,  "slug": slug.current,  coverImage,  "author": {    "name": author->name,    "avatar": author->avatar  },  publishedAt,  readingTime,  category,  tags,  featured}
export type SearchBlogPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  slug: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    avatar: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
  };
  publishedAt: string | null;
  readingTime: string | null;
  category: string | null;
  tags: Array<string> | null;
  featured: boolean | null;
}>;
// Variable: allCategoriesQuery
// Query: array::unique(*[  _type == "post"   && defined(category)].category)
export type AllCategoriesQueryResult = Array<string | null>;
// Variable: allTagsQuery
// Query: array::unique(*[  _type == "post"   && defined(tags)].tags[])
export type AllTagsQueryResult = Array<string | null>;
// Variable: blogHeroQuery
// Query: *[_type == "blogHero"][0]{  title,  description,  announcement,  announcementLink}
export type BlogHeroQueryResult = {
  title: string | null;
  description: string | null;
  announcement: string | null;
  announcementLink: string | null;
} | null;
// Variable: allPostSlugsQuery
// Query: *[  _type == "post"  && defined(slug.current)].slug.current
export type AllPostSlugsQueryResult = Array<string | null>;

// Source: ../sophron-studies-frontend/src/sanity/queries/homepage.queries.ts
// Variable: homePageQuery
// Query: *[_type == "homePage"][0] {  _id,  title,  heroSection {    title,    vimeoUrl,    backgroundImage {..., asset->}  },  definitionSection {    titlePart1,    titlePart2,    definitionText,    importantPointTitle,    importantPointText,    image1 {alt, asset->},    image2 {alt, asset->}  },  featuredBlogPostSection {    titlePart1,    titlePart2,    buttonText,    image1 {alt, asset->},    image2 {alt, asset->},    featuredPost-> {      _id,      title,      slug { current },      excerpt,      coverImage {alt, asset->}    }  },  upcomingReleaseSection {    reference-> {      titlePart1,      titlePart2,      text,      buttonText,      buttonLink,      image1 {alt, asset->},      image2 {alt, asset->}    },    customButtonText,    customButtonLink  },  newsletterSection-> {    title,    subtitle,    placeholderText,    buttonText  },  testimonialsSection {    title,    subtitle,    testimonials[] {      text,      citation    }  }}
export type HomePageQueryResult = {
  _id: string;
  title: string | null;
  heroSection: {
    title: null;
    vimeoUrl: string | null;
    backgroundImage: {
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  definitionSection: {
    titlePart1: string | null;
    titlePart2: string | null;
    definitionText: BlockContent | null;
    importantPointTitle: string | null;
    importantPointText: BlockContent | null;
    image1: {
      alt: string | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
    image2: {
      alt: string | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
  } | null;
  featuredBlogPostSection: {
    titlePart1: string | null;
    titlePart2: string | null;
    buttonText: string | null;
    image1: {
      alt: string | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
    image2: {
      alt: string | null;
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
    } | null;
    featuredPost: {
      _id: string;
      title: string | null;
      slug: {
        current: string | null;
      } | null;
      excerpt: string | null;
      coverImage: {
        alt: null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
  } | null;
  upcomingReleaseSection: {
    reference: {
      titlePart1: string | null;
      titlePart2: string | null;
      text: BlockContent | null;
      buttonText: string | null;
      buttonLink: string | null;
      image1: {
        alt: string | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
      image2: {
        alt: string | null;
        asset: {
          _id: string;
          _type: "sanity.imageAsset";
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          originalFilename?: string;
          label?: string;
          title?: string;
          description?: string;
          altText?: string;
          sha1hash?: string;
          extension?: string;
          mimeType?: string;
          size?: number;
          assetId?: string;
          uploadId?: string;
          path?: string;
          url?: string;
          metadata?: SanityImageMetadata;
          source?: SanityAssetSourceData;
        } | null;
      } | null;
    } | null;
    customButtonText: string | null;
    customButtonLink: string | null;
  } | null;
  newsletterSection: {
    title: string | null;
    subtitle: string | null;
    placeholderText: string | null;
    buttonText: string | null;
  } | null;
  testimonialsSection: {
    title: string | null;
    subtitle: string | null;
    testimonials: Array<{
      text: string | null;
      citation: string | null;
    }> | null;
  } | null;
} | null;
// Variable: testimonialsQuery
// Query: *[_type == "homePage"][0] {  testimonialsSection {    title,    subtitle,    testimonials[] {      text,      citation    }  }}
export type TestimonialsQueryResult = {
  testimonialsSection: {
    title: string | null;
    subtitle: string | null;
    testimonials: Array<{
      text: string | null;
      citation: string | null;
    }> | null;
  } | null;
} | null;

// Source: ../sophron-studies-frontend/src/sanity/queries/newsletter.queries.ts
// Variable: newsletterSectionQuery
// Query: *[_type == "newsletterSection"][0] {  title,  subtitle,  placeholderText,  buttonText}
export type NewsletterSectionQueryResult = {
  title: string | null;
  subtitle: string | null;
  placeholderText: string | null;
  buttonText: string | null;
} | null;

// Source: ../sophron-studies-frontend/src/sanity/queries/shop.queries.ts
// Variable: categoriesQuery
// Query: *[_type == "category"] {  _id,  title,  slug,  description,  "productCount": count(*[_type == "product" && isAvailable == true && !(_id in path("drafts.**")) && references(^._id)])} | order(title asc)
export type CategoriesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  productCount: number;
}>;
// Variable: productsQuery
// Query: *[_type == "product" && isAvailable == true && !(_id in path("drafts.**"))] | order(_createdAt desc) {  _id,  name,  slug,  images[]{..., asset->},  price,  externalUrl,  categories[]->{_id, title, slug},  sizes,  _createdAt}
export type ProductsQueryResult = Array<{
  _id: string;
  name: string | null;
  slug: Slug | null;
  images: Array<{
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  price: number | null;
  externalUrl: string | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  sizes: Array<string> | null;
  _createdAt: string;
}>;
// Variable: productBySlugQuery
// Query: *[  _type == "product"  && slug.current == $slug][0]{  _id,  name,  slug,  images[]{..., asset->},  description,  price,  externalUrl,  isAvailable,  categories[]->{_id, title, slug},  sizes,  _createdAt}
export type ProductBySlugQueryResult = {
  _id: string;
  name: string | null;
  slug: Slug | null;
  images: Array<{
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  description: BlockContent | null;
  price: number | null;
  externalUrl: string | null;
  isAvailable: boolean | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
  sizes: Array<string> | null;
  _createdAt: string;
} | null;
// Variable: allProductSlugsQuery
// Query: *[  _type == "product"  && defined(slug.current)  && isAvailable == true].slug.current
export type AllProductSlugsQueryResult = Array<string | null>;

// Source: ../sophron-studies-frontend/src/sanity/queries/upcomingrelease.queries.ts
// Variable: latestUpcomingReleaseQuery
// Query: *[_type == "upcomingReleaseSection"] | order(_createdAt desc)[0] {  _id,  titlePart1,  titlePart2,  text,  buttonText,  buttonLink,  image1 {asset->, alt},  image2 {asset->, alt}}
export type LatestUpcomingReleaseQueryResult = {
  _id: string;
  titlePart1: string | null;
  titlePart2: string | null;
  text: BlockContent | null;
  buttonText: string | null;
  buttonLink: string | null;
  image1: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
  image2: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
} | null;
// Variable: upcomingReleaseByIdQuery
// Query: *[  _type == "upcomingReleaseSection"  && _id == $id][0] {  _id,  titlePart1,  titlePart2,  text,  buttonText,  buttonLink,  image1 {asset->, alt},  image2 {asset->, alt}}
export type UpcomingReleaseByIdQueryResult = {
  _id: string;
  titlePart1: string | null;
  titlePart2: string | null;
  text: BlockContent | null;
  buttonText: string | null;
  buttonLink: string | null;
  image1: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
  image2: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"aboutPage\"][0] {\n  _id,\n  title,\n  aboutHeroSection {\n    name,\n    backgroundImage,\n    rightImage,\n    leftImage\n  },\n  aboutBioSection {\n    heading,\n    body\n  },\n  aboutGallerySection {\n    images[]\n  },\n  upcomingReleaseSection {\n    reference-> {\n      titlePart1,\n      titlePart2,\n      text,\n      buttonText,\n      buttonLink,\n      image1,\n      image2\n    },\n    customButtonText,\n    customButtonLink\n  },\n  newsletterSection-> {\n    title,\n    subtitle,\n    placeholderText,\n    buttonText\n  }\n}": AboutPageQueryResult;
    "*[\n  _type == \"post\"\n  && defined(slug.current)\n]|order(publishedAt desc){\n  \n  _id,\n  title,\n  excerpt,\n  content,\n  \"slug\": slug.current,\n  coverImage,\n  \"author\": {\n    \"name\": author->name,\n    \"avatar\": author->avatar\n  },\n  publishedAt,\n  readingTime,\n  category,\n  tags,\n  featured\n\n}": AllBlogPostsQueryResult;
    "*[\n  _type == \"post\"\n  && defined(slug.current)\n  && featured == true\n]|order(publishedAt desc){\n  \n  _id,\n  title,\n  excerpt,\n  content,\n  \"slug\": slug.current,\n  coverImage,\n  \"author\": {\n    \"name\": author->name,\n    \"avatar\": author->avatar\n  },\n  publishedAt,\n  readingTime,\n  category,\n  tags,\n  featured\n\n}": FeaturedBlogPostsQueryResult;
    "*[\n  _type == \"post\"\n  && slug.current == $slug\n][0]{\n  \n  _id,\n  title,\n  excerpt,\n  content,\n  \"slug\": slug.current,\n  coverImage,\n  \"author\": {\n    \"name\": author->name,\n    \"avatar\": author->avatar\n  },\n  publishedAt,\n  readingTime,\n  category,\n  tags,\n  featured\n\n}": BlogPostBySlugQueryResult;
    "*[\n  _type == \"post\"\n  && slug.current != $slug\n  && (category == $category || count((tags)[@ in $tags]) > 0)\n]|order(publishedAt desc)[0...3]{\n  \n  _id,\n  title,\n  excerpt,\n  content,\n  \"slug\": slug.current,\n  coverImage,\n  \"author\": {\n    \"name\": author->name,\n    \"avatar\": author->avatar\n  },\n  publishedAt,\n  readingTime,\n  category,\n  tags,\n  featured\n\n}": RelatedPostsQueryResult;
    "*[\n  _type == \"post\"\n  && slug.current != $slug\n  && !(_id in $existingIds)\n]|order(publishedAt desc)[0...3]{\n  \n  _id,\n  title,\n  excerpt,\n  content,\n  \"slug\": slug.current,\n  coverImage,\n  \"author\": {\n    \"name\": author->name,\n    \"avatar\": author->avatar\n  },\n  publishedAt,\n  readingTime,\n  category,\n  tags,\n  featured\n\n}": RecentPostsQueryResult;
    "*[\n  _type == \"post\"\n  && defined(slug.current)\n  && category == $category\n]|order(publishedAt desc){\n  \n  _id,\n  title,\n  excerpt,\n  content,\n  \"slug\": slug.current,\n  coverImage,\n  \"author\": {\n    \"name\": author->name,\n    \"avatar\": author->avatar\n  },\n  publishedAt,\n  readingTime,\n  category,\n  tags,\n  featured\n\n}": BlogPostsByCategoryQueryResult;
    "*[\n  _type == \"post\"\n  && defined(slug.current)\n  && $tagName in tags\n]|order(publishedAt desc){\n  \n  _id,\n  title,\n  excerpt,\n  content,\n  \"slug\": slug.current,\n  coverImage,\n  \"author\": {\n    \"name\": author->name,\n    \"avatar\": author->avatar\n  },\n  publishedAt,\n  readingTime,\n  category,\n  tags,\n  featured\n\n}": BlogPostsByTagQueryResult;
    "*[\n  _type == \"post\"\n  && defined(slug.current)\n  && (\n    title match $searchPattern ||\n    excerpt match $searchPattern ||\n    content match $searchPattern ||\n    category match $searchPattern\n  )\n]|order(publishedAt desc){\n  \n  _id,\n  title,\n  excerpt,\n  content,\n  \"slug\": slug.current,\n  coverImage,\n  \"author\": {\n    \"name\": author->name,\n    \"avatar\": author->avatar\n  },\n  publishedAt,\n  readingTime,\n  category,\n  tags,\n  featured\n\n}": SearchBlogPostsQueryResult;
    "array::unique(*[\n  _type == \"post\" \n  && defined(category)\n].category)": AllCategoriesQueryResult;
    "array::unique(*[\n  _type == \"post\" \n  && defined(tags)\n].tags[])": AllTagsQueryResult;
    "*[_type == \"blogHero\"][0]{\n  title,\n  description,\n  announcement,\n  announcementLink\n}": BlogHeroQueryResult;
    "*[\n  _type == \"post\"\n  && defined(slug.current)\n].slug.current": AllPostSlugsQueryResult;
    "*[_type == \"homePage\"][0] {\n  _id,\n  title,\n  heroSection {\n    title,\n    vimeoUrl,\n    backgroundImage {..., asset->}\n  },\n  definitionSection {\n    titlePart1,\n    titlePart2,\n    definitionText,\n    importantPointTitle,\n    importantPointText,\n    image1 {alt, asset->},\n    image2 {alt, asset->}\n  },\n  featuredBlogPostSection {\n    titlePart1,\n    titlePart2,\n    buttonText,\n    image1 {alt, asset->},\n    image2 {alt, asset->},\n    featuredPost-> {\n      _id,\n      title,\n      slug { current },\n      excerpt,\n      coverImage {alt, asset->}\n    }\n  },\n  upcomingReleaseSection {\n    reference-> {\n      titlePart1,\n      titlePart2,\n      text,\n      buttonText,\n      buttonLink,\n      image1 {alt, asset->},\n      image2 {alt, asset->}\n    },\n    customButtonText,\n    customButtonLink\n  },\n  newsletterSection-> {\n    title,\n    subtitle,\n    placeholderText,\n    buttonText\n  },\n  testimonialsSection {\n    title,\n    subtitle,\n    testimonials[] {\n      text,\n      citation\n    }\n  }\n}": HomePageQueryResult;
    "*[_type == \"homePage\"][0] {\n  testimonialsSection {\n    title,\n    subtitle,\n    testimonials[] {\n      text,\n      citation\n    }\n  }\n}": TestimonialsQueryResult;
    "*[_type == \"newsletterSection\"][0] {\n  title,\n  subtitle,\n  placeholderText,\n  buttonText\n}": NewsletterSectionQueryResult;
    "*[_type == \"category\"] {\n  _id,\n  title,\n  slug,\n  description,\n  \"productCount\": count(*[_type == \"product\" && isAvailable == true && !(_id in path(\"drafts.**\")) && references(^._id)])\n} | order(title asc)": CategoriesQueryResult;
    "*[_type == \"product\" && isAvailable == true && !(_id in path(\"drafts.**\"))] | order(_createdAt desc) {\n  _id,\n  name,\n  slug,\n  images[]{..., asset->},\n  price,\n  externalUrl,\n  categories[]->{_id, title, slug},\n  sizes,\n  _createdAt\n}": ProductsQueryResult;
    "*[\n  _type == \"product\"\n  && slug.current == $slug\n][0]{\n  _id,\n  name,\n  slug,\n  images[]{..., asset->},\n  description,\n  price,\n  externalUrl,\n  isAvailable,\n  categories[]->{_id, title, slug},\n  sizes,\n  _createdAt\n}": ProductBySlugQueryResult;
    "*[\n  _type == \"product\"\n  && defined(slug.current)\n  && isAvailable == true\n].slug.current": AllProductSlugsQueryResult;
    "*[_type == \"upcomingReleaseSection\"] | order(_createdAt desc)[0] {\n  _id,\n  titlePart1,\n  titlePart2,\n  text,\n  buttonText,\n  buttonLink,\n  image1 {asset->, alt},\n  image2 {asset->, alt}\n}": LatestUpcomingReleaseQueryResult;
    "*[\n  _type == \"upcomingReleaseSection\"\n  && _id == $id\n][0] {\n  _id,\n  titlePart1,\n  titlePart2,\n  text,\n  buttonText,\n  buttonLink,\n  image1 {asset->, alt},\n  image2 {asset->, alt}\n}": UpcomingReleaseByIdQueryResult;
  }
}
